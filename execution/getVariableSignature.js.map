{"version":3,"file":"getVariableSignature.js","sourceRoot":"","sources":["../../src/execution/getVariableSignature.ts"],"names":[],"mappings":";;;AAAA,8DAAwD;AAGxD,uDAA+C;AAE/C,yDAAoD;AAOpD,gEAA0D;AAc1D,SAAgB,oBAAoB,CAClC,MAAqB,EACrB,UAAkC;IAElC,MAAM,OAAO,GAAG,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;IAC/C,MAAM,OAAO,GAAG,IAAA,4BAAW,EAAC,MAAM,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;IAErD,IAAI,CAAC,IAAA,2BAAW,EAAC,OAAO,CAAC,EAAE,CAAC;QAC1B,mEAAmE;QACnE,wDAAwD;QACxD,MAAM,UAAU,GAAG,IAAA,kBAAK,EAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAC1C,OAAO,IAAI,8BAAY,CACrB,cAAc,OAAO,6BAA6B,UAAU,0CAA0C,EACtG,EAAE,KAAK,EAAE,UAAU,CAAC,IAAI,EAAE,CAC3B,CAAC;IACJ,CAAC;IAED,MAAM,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC;IAE7C,OAAO;QACL,IAAI,EAAE,OAAO;QACb,IAAI,EAAE,OAAO;QACb,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC,CAAC,CAAC,SAAS;KACnE,CAAC;AACJ,CAAC;AAxBD,oDAwBC","sourcesContent":["import { GraphQLError } from '../error/GraphQLError.js';\n\nimport type { VariableDefinitionNode } from '../language/ast.js';\nimport { print } from '../language/printer.js';\n\nimport { isInputType } from '../type/definition.js';\nimport type {\n  GraphQLDefaultValueUsage,\n  GraphQLInputType,\n  GraphQLSchema,\n} from '../type/index.js';\n\nimport { typeFromAST } from '../utilities/typeFromAST.js';\n\n/**\n * A GraphQLVariableSignature is required to coerce a variable value.\n *\n * Designed to have comparable interface to GraphQLArgument so that\n * getArgumentValues() can be reused for fragment arguments.\n * */\nexport interface GraphQLVariableSignature {\n  name: string;\n  type: GraphQLInputType;\n  defaultValue: GraphQLDefaultValueUsage | undefined;\n}\n\nexport function getVariableSignature(\n  schema: GraphQLSchema,\n  varDefNode: VariableDefinitionNode,\n): GraphQLVariableSignature | GraphQLError {\n  const varName = varDefNode.variable.name.value;\n  const varType = typeFromAST(schema, varDefNode.type);\n\n  if (!isInputType(varType)) {\n    // Must use input types for variables. This should be caught during\n    // validation, however is checked again here for safety.\n    const varTypeStr = print(varDefNode.type);\n    return new GraphQLError(\n      `Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`,\n      { nodes: varDefNode.type },\n    );\n  }\n\n  const defaultValue = varDefNode.defaultValue;\n\n  return {\n    name: varName,\n    type: varType,\n    defaultValue: defaultValue ? { literal: defaultValue } : undefined,\n  };\n}\n"]}